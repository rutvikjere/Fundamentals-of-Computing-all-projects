"""
Monte Carlo Tic-Tac-Toe Player
"""

import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator
# You may change the values of these constants as desired, but
#  do not change their names.
NTRIALS = 100         # Number of trials to run
SCORE_CURRENT = 1.0 # Score for squares played by the current player
SCORE_OTHER = 1.0   # Score for squares played by the other player

# Functions to create the monte carlo simulation:
def mc_trial(board, player):
    """Function is used to conduct a round / trial of the game. 
        Returns when game is over."""
    
    trial_winner = board.check_win()
    curr_player = player
    
    empty_sqrs = board.get_empty_squares()

    while trial_winner == None:        
        move_choice = random.choice(empty_sqrs)            
        board.move(move_choice[0], move_choice[1], curr_player)
        empty_sqrs.remove(move_choice)
        trial_winner = board.check_win()
        curr_player = provided.switch_player(curr_player)

    return trial_winner 
    
def mc_update_scores(scores, board, player):
    """"Function is used to update the score grid with the 
        appropriate values."""

    if player == board.check_win():
        for grid_row in range(board.get_dim()):
            for grid_col in range(board.get_dim()):
                if board.square(grid_row, grid_col) == player:
                    scores[grid_row][grid_col] += SCORE_CURRENT
                elif board.square(grid_row, grid_col) == provided.switch_player(player):
                    scores[grid_row][grid_col] -= SCORE_OTHER
    
    elif provided.switch_player(player) == board.check_win():
        for grid_row in range(board.get_dim()):
            for grid_col in range(board.get_dim()):
                if board.square(grid_row, grid_col) == player:
                    scores[grid_row][grid_col] -= SCORE_CURRENT
                elif board.square(grid_row, grid_col) == provided.switch_player(player):
                    scores[grid_row][grid_col] += SCORE_OTHER 
    
def get_best_move(board, scores):
    """Returns the best move by computing the square with the highest score."""
    
    empty_sqrs = board.get_empty_squares()
    
    if empty_sqrs == []:
        return None
    
    else:
        optimal_move = []
        optimal_score = scores[empty_sqrs[0][0]][empty_sqrs[0][1]]
        for sqrs in empty_sqrs:
            if scores[sqrs[0]][sqrs[1]] == optimal_score:
                optimal_move.append((sqrs[0], sqrs[1]))
            
            elif scores[sqrs[0]][sqrs[1]] > optimal_score:
                optimal_move = []
                optimal_move.append((sqrs[0], sqrs[1]))
                optimal_score = scores[sqrs[0]][sqrs[1]]

        return random.choice(optimal_move)

#print get_best_move(test_board, test_scores)
def mc_move(board, player, trial):
    """Returns the best move"""

    score_grid = [[0 for dummy_col in range(board.get_dim())] 
             for dummy_row in range(board.get_dim())]

    for dummy in range(trial):
        temp_board = board.clone()
        mc_trial(board=temp_board, player=player)
        mc_update_scores(board=temp_board, scores=score_grid, player=player)
 
    return get_best_move(board=board, scores=score_grid)

# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.

#provided.play_game(mc_move, NTRIALS, False)
#poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)
