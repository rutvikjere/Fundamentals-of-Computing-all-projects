"""
Clone of 2048 game.
"""

import poc_2048_gui
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    result = [0] * len(line)
    
    for line_elem in range(0, len(line)):
        if line[line_elem] != 0:
            for result_elem in range(0, len(result)):
                if result[result_elem] == 0:
                    result[result_elem] = line[line_elem]
                    break
                    
    merge_result = list(result)
    result_elem = 0
    
    while result_elem < len(result)-1:
        if result[result_elem] == result[result_elem+1]:
            merge_result[result_elem] = result[result_elem] * 2
            merge_result[result_elem+1] = 0
            result_elem += 2
        else:
            result_elem += 1
                   
    final_result = [0] * len(merge_result)
            
    for elem in range(0, len(merge_result)):
        if merge_result[elem] != 0:
            for final_elem in range(0, len(final_result)):
                if final_result[final_elem] == 0:
                    final_result[final_elem] = merge_result[elem]
                    break                    
                           
    return final_result


class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        self._grid_height = grid_height
        self._grid_width = grid_width
        
        # Assigning the initial tiles for the 4 directions and storing them in a dict:
        self._tile_right_pos = []
        self._tile_left_pos = []
        self._tile_down_pos = []
        self._tile_up_pos = []
        
        # Initial tiles for all move directions:
        for indice in range(self.get_grid_height()):
            self._tile_left_pos.append((indice, 0)) 
            self._tile_right_pos.append((indice, self.get_grid_width() - 1)) 

        for indice in range(self.get_grid_width()):
            self._tile_up_pos.append((0, indice)) 
            self._tile_down_pos.append((self.get_grid_height() - 1, indice))
            
            self._tile_pos = {UP: self._tile_up_pos,
                           DOWN: self._tile_down_pos,
                           RIGHT: self._tile_right_pos,
                           LEFT: self._tile_left_pos}
        
        # Loop starting position for all moves directions:
        self._loop_var = {DOWN: self.get_grid_height(),
                         UP: self.get_grid_height(),
                         RIGHT: self.get_grid_width(),
                         LEFT: self.get_grid_width()}
        
        self.reset()

    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._class_grid = [[0 for dummy_row in range(self.get_grid_width())] 
                        for dummy_col in range(self.get_grid_height())]
        
        self.new_tile()
        self.new_tile()
        
    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        for row in range(self.get_grid_height()):
            print self._class_grid[row]
            
        return ""

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self._grid_height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self._grid_width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        grid_copy = [tile[:] for tile in self._class_grid]

        # Looping over the direction's initial positions:
        for tile in self._tile_pos[direction]:
            curr_tile = []            
            indice_position_row, indice_position_col = tile[0], tile[1] 
            
            # Looping through the tile values for that position:
            for step in range(self._loop_var[direction]):
                get_position_row = indice_position_row + step * OFFSETS[direction][0]
                get_position_col = indice_position_col + step * OFFSETS[direction][1]
                curr_tile.append(self.get_tile(get_position_row, get_position_col))
                
            merged_tile = merge(curr_tile)

            # Looping through the tile values for that position:
            for step in range(len(merged_tile)):
                set_position_row = indice_position_row + step * OFFSETS[direction][0]
                set_position_col = indice_position_col + step * OFFSETS[direction][1]
                self.set_tile(set_position_row, set_position_col, merged_tile[step])
                
        if grid_copy != self._class_grid:
            self.new_tile()

    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        tile_value = random.choice([2, 2, 2, 2, 2, 2, 2, 2, 2, 4])
        tile_row, tile_col = random.randrange(0, self.get_grid_height()), random.randrange(0, self.get_grid_width())
        # Set tile value only if the tile values was previously 0:
        while(self.get_tile(tile_row, tile_col) != 0):
            tile_row, tile_col = random.randrange(0, self.get_grid_height()), random.randrange(0, self.get_grid_width())
        
        self.set_tile(tile_row, tile_col, tile_value)

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self._class_grid[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self._class_grid[row][col]

poc_2048_gui.run_gui(TwentyFortyEight(2, 3))