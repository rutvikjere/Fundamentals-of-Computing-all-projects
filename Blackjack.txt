# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = "Hit or stand?"
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand = []  

    def __str__(self):
        # return a string representation of a hand
        hand_str = "Hand contains "
        for i in self.hand:
            hand_str = hand_str+str(i)+" "
        return hand_str

    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)  

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        rank_list = []
        for i in self.hand:
            hand_value += VALUES[i.get_rank()]
            rank_list.append(i.get_rank())
        
        if 'A' not in rank_list:
            return hand_value
        
        else:
            if hand_value + 10 <= 21:
                return hand_value + 10
            else:
                return hand_value            
   
    def draw(self, canvas, pos, dealer, in_play):
        # draw a hand on the canvas, use the draw method for cards
        if len(self.hand) > 4:
            no_cards = 4
        else:
            no_cards = len(self.hand)
            
        if dealer:
            for i in range(no_cards):
                if (i == 0) and (in_play == True):
                    card_loc = (CARD_BACK_CENTER[0] + CARD_BACK_SIZE[0] * 1,
                               CARD_BACK_CENTER[1] + CARD_BACK_SIZE[1] * 0)
                    canvas.draw_image(card_back, card_loc, CARD_BACK_SIZE, [pos[0] + CARD_BACK_CENTER[0] * i, pos[1] + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
                else:
                    card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.hand[i].rank), 
                        CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.hand[i].suit))
                    canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0] * i, pos[1] + CARD_CENTER[1]], CARD_SIZE)
                
        else:
            for i in range(no_cards):
                card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.hand[i].rank), 
                            CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.hand[i].suit))
                canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0] * i, pos[1] + CARD_CENTER[1]], CARD_SIZE)
 
                        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck = []
        for i in SUITS:
            for j in RANKS:
                card = Card(i, j)
                self.deck.append(card)

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)
        return self.deck

    def deal_card(self):
        # deal a card object from the deck
        card_to_deal = self.deck[-1]
        self.deck.remove(self.deck[-1])
        return card_to_deal    
    
    def __str__(self):
        # return a string representing the deck
        deck_str = "Deck contains "
        for i in self.deck:
            deck_str = deck_str + str(i) + " "
        return deck_str


#define event handlers for buttons
def deal():
    global outcome, in_play, deck, player_hand, dealer_hand, score
    outcome = "Hit or stand?"
    
    if in_play:
        score -= 1
        outcome = "You ran away! New game."

    # your code goes here
    deck = Deck()
    deck.shuffle()
    
    player_hand = Hand()
    dealer_hand = Hand()
    
    player_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    player_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    
    in_play = True

def hit(): 
    global player_hand, outcome, in_play, deck, score
    # if the hand is in play, hit the player
    if player_hand.get_value() <= 21:
        player_hand.add_card(deck.deal_card())
        
        if player_hand.get_value() > 21:
            in_play = False
            outcome = "You're busted! New game?"
            score -= 1
            
        # if busted, assign a message to outcome, update in_play and score    
    else:
        outcome = "You're busted! New game?"
    
def stand():   
    global dealer_hand, outcome, in_play, deck, player_hand, score
    
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    while in_play:
        if dealer_hand.get_value() <= 17:
            dealer_hand.add_card(deck.deal_card())
            
        else:
            in_play = False
            if dealer_hand.get_value() > 21:
                outcome = "Dealer busts, you win! New game?"
                score += 1             
                
            elif player_hand.get_value() > dealer_hand.get_value():
                outcome = "You win! New game?"
                score += 1
            
            elif player_hand.get_value() < dealer_hand.get_value():
                outcome = "You lose! New game?"
                score -= 1
                    
            else:
                outcome = "It's a tie, You lose! Bad luck"
                score -= 1
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    global player_hand, dealer_hand, score, outcome, in_play
    # test to make sure that card.draw works, replace with your code below

    player_hand.draw(canvas, [100, 350], dealer=False, in_play=in_play)
    dealer_hand.draw(canvas, [100, 150], dealer=True, in_play=in_play)
    canvas.draw_text("Dealer:", (50, 130), 17, "Black")
    canvas.draw_text("Player:", (50, 330), 17, "Black")
    canvas.draw_text(outcome, (335, 150), 20, 'Black')
    canvas.draw_text("Your score: "+str(score), (400, 125), 20, 'Black')
    canvas.draw_text("Blackjack", (225, 70), 40, 'Black')


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric