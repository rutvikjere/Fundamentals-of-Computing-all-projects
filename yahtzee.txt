"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set

    return answer_set

def gen_all_combos(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """

    answer_set = set([()])    
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                flag = 0
                for elem in new_sequence:
                    if new_sequence.count(elem) > outcomes.count(elem):
                        flag += 1
                if flag == 0:
                    temp_set.add(tuple(new_sequence))
                    
        answer_set = temp_set
          
    sorted_set = [tuple(sorted(seq)) for seq in answer_set]
    sorted_set = set(sorted_set)    
    
    return sorted_set

def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    if len(hand) == 0:
        return 0
    
    else:
        hand = sorted(list(hand))
        unique_hand = list(set(hand))
    
        scores = [hand.count(die)*die for die in unique_hand]
       
        return max(scores)

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    
    all_seqs = gen_all_sequences(outcomes=range(1,(num_die_sides+1)), length=num_free_dice)
    all_seqs = list(all_seqs)
    
    all_hand_seqs = []
    held_dice_temp = list(held_dice)    
    expected_val = 0
    
    # All possible sequences from the next rolls.
    for seq in all_seqs:
        hand = held_dice_temp + list(seq)
        hand = sorted(hand)
        all_hand_seqs.append(tuple(hand))
        
    #print all_hand_seqs
    
    sorted_all_seqs = set(all_hand_seqs)
    
    # Calculate the probability and multiply with the value to get the expected value.
    num_seqs = len(all_hand_seqs)
    for seq in sorted_all_seqs:
        #print seq, score(seq)
        count = all_hand_seqs.count(seq)
        prob = float(count) / float(num_seqs)
        expected_val += (prob * score(seq))
    
    return expected_val

def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    iter_hand = list(hand)
    answer_set = []
    
    for idx in range(1, len(hand)+1):
        temp_hand = iter_hand[:idx]
        temp_set = set()
        for hold_size in range(1, len(temp_hand)+1):
            temp_set = gen_all_combos(temp_hand, hold_size)
            temp_set =  list(temp_set)
            for hold in temp_set:
                answer_set.append(hold)

    answer_set = set(answer_set) 
    sorted_set = [tuple(sorted(seq)) for seq in answer_set]
    sorted_set = set(sorted_set)
    sorted_set.add(())
    return set(sorted_set)

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    
    hold_seqs = gen_all_holds(hand)
    temp_hold_seqs = list(hold_seqs)
    
    optimal_score = 0
    optimal_hold = ()
    
    for hold in temp_hold_seqs:
        num_free_dice = len(hand)-len(hold)        
        expected_val = expected_value(held_dice=hold, 
                                      num_free_dice=num_free_dice, 
                                      num_die_sides=num_die_sides)
        
        if expected_val > optimal_score:
            optimal_score = expected_val
            optimal_hold = hold
                
    return (optimal_score, optimal_hold)

def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()

#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    



