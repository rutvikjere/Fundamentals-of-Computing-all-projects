"""
Loyd's Fifteen puzzle - solver and visualizer
Note that solved configuration has the blank (zero) tile in upper left
Use the arrows key to swap this tile with its neighbors
"""

import poc_fifteen_gui

class Puzzle:
    """
    Class representation for the Fifteen puzzle
    """

    def __init__(self, puzzle_height, puzzle_width, initial_grid=None):
        """
        Initialize puzzle with default height and width
        Returns a Puzzle object
        """
        self._height = puzzle_height
        self._width = puzzle_width
        self._grid = [[col + puzzle_width * row
                       for col in range(self._width)]
                      for row in range(self._height)]

        if initial_grid != None:
            for row in range(puzzle_height):
                for col in range(puzzle_width):
                    self._grid[row][col] = initial_grid[row][col]

    def __str__(self):
        """
        Generate string representaion for puzzle
        Returns a string
        """
        ans = ""
        for row in range(self._height):
            ans += str(self._grid[row])
            ans += "\n"
        return ans

    #####################################
    # GUI methods

    def get_height(self):
        """
        Getter for puzzle height
        Returns an integer
        """
        return self._height

    def get_width(self):
        """
        Getter for puzzle width
        Returns an integer
        """
        return self._width

    def get_number(self, row, col):
        """
        Getter for the number at tile position pos
        Returns an integer
        """
        return self._grid[row][col]

    def set_number(self, row, col, value):
        """
        Setter for the number at tile position pos
        """
        self._grid[row][col] = value

    def clone(self):
        """
        Make a copy of the puzzle to update during solving
        Returns a Puzzle object
        """
        new_puzzle = Puzzle(self._height, self._width, self._grid)
        return new_puzzle

    ########################################################
    # Core puzzle methods

    def current_position(self, solved_row, solved_col):
        """
        Locate the current position of the tile that will be at
        position (solved_row, solved_col) when the puzzle is solved
        Returns a tuple of two integers        
        """
        solved_value = (solved_col + self._width * solved_row)

        for row in range(self._height):
            for col in range(self._width):
                if self._grid[row][col] == solved_value:
                    return (row, col)
        assert False, "Value " + str(solved_value) + " not found"

    def update_puzzle(self, move_string):
        """
        Updates the puzzle state based on the provided move string
        """
        zero_row, zero_col = self.current_position(0, 0)
        for direction in move_string:
            if direction == "l":
                assert zero_col > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col - 1]
                self._grid[zero_row][zero_col - 1] = 0
                zero_col -= 1
            elif direction == "r":
                assert zero_col < self._width - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col + 1]
                self._grid[zero_row][zero_col + 1] = 0
                zero_col += 1
            elif direction == "u":
                assert zero_row > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row - 1][zero_col]
                self._grid[zero_row - 1][zero_col] = 0
                zero_row -= 1
            elif direction == "d":
                assert zero_row < self._height - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row + 1][zero_col]
                self._grid[zero_row + 1][zero_col] = 0
                zero_row += 1
            else:
                assert False, "invalid direction: " + direction

    ##################################################################
    # Phase one methods

    def lower_row_invariant(self, target_row, target_col):
        """
        Check whether the puzzle satisfies the specified invariant
        at the given position in the bottom rows of the puzzle (target_row > 1)
        Returns a boolean
        """
        invar_bool = True
        
        if self.get_number(target_row, target_col) != 0:
            return False
        
        # Check rows below target_row:
        for row_invar in range(target_row+1, self.get_height()):
            for col_invar in range(self.get_width()):
                correct_no = (col_invar + self.get_width() * row_invar)
                if self.get_number(row_invar, col_invar) != correct_no:
                    return False
        
        # Check cols after target_col:
        for col_invar in range(target_col+1, self.get_width()):
            correct_no = (col_invar + self.get_width() * target_row)
            if self.get_number(target_row, col_invar) != correct_no:
                return False
                
        return invar_bool
    
    def position_tile(self, target_row, target_col, curr_row, curr_col):
        """
        Place correct tile at target position and returns a move string
        """
        dist = []
        # If current pos is behind target tile:
        if curr_row == target_row:
            dist.append("l" * (target_col - curr_col))
            if abs(curr_col - target_col) > 1:
                dist.append("urrdl" * (abs(curr_col - target_col) - 1))
            return "".join(dist)        
        
        else:
            if (curr_col - target_col) > 0:
                # Target tile to current tile:
                dist.append("u" * (abs(curr_row - target_row)))
                dist.append("r" * (abs(curr_col - target_col)))
                
                # Remove hortizontal factor:
                if curr_row > 0:
                    dist.append("ulldr" * (abs(curr_col - target_col) - 1))                
                    dist.append("uld")
                else:
                    dist.append("dllur" * (abs(curr_col - target_col) - 1))
                    dist.append("dlu")
                
                # Current tile exactly above target tile:
                dist.append("lddru" * (abs(curr_row - target_row) - 1))
                
                # Move 0 tile behind target tile 
                #(lower_row_invariant(target_row, target_col - 1)): 
                dist.append("ld")
                    
            elif (curr_col - target_col) < 0:
                # Target tile to current tile:
                dist.append("u" * (abs(curr_row - target_row)))
                dist.append("l" * (abs(curr_col - target_col)))
                
                # Remove hortizontal factor:
                if curr_row > 0:
                    dist.append("urrdl" * (abs(curr_col - target_col) - 1))                
                    dist.append("dru")
                else:
                    dist.append("drrul" * (abs(curr_col - target_col) - 1))
                    dist.append("dru")

                # Current tile exactly above target tile:
                dist.append("lddru" * (abs(curr_row - target_row) - 1))
                    
                # Move 0 tile behind target tile 
                #(lower_row_invariant(target_row, target_col - 1)): 
                dist.append("ld")
            
            elif (curr_col - target_col) == 0:
                # Remove vertical factor and move tile to satisfy 
                # lower_row_invariant(target_row, target_col - 1):
                dist.append("u" * (abs(curr_row - target_row)))
                dist.append("lddru" * (abs(curr_row - target_row) - 1))
                dist.append("ld")

        return "".join(dist)

    def solve_interior_tile(self, target_row, target_col):
        """
        Place correct tile at target position
        Updates puzzle and returns a move string
        """
        assert self.lower_row_invariant(target_row, target_col)
        
        curr_pos = self.current_position(target_row, target_col)
        curr_row, curr_col = curr_pos[0], curr_pos[1]
        
        dist = self.position_tile(target_row, target_col, curr_row, curr_col)
        
        self.update_puzzle(dist)
        
        assert self.lower_row_invariant(target_row, target_col - 1)
        
        return dist

    def solve_col0_tile(self, target_row):
        """
        Solve tile in column zero on specified row (> 1)
        Updates puzzle and returns a move string
        """
        assert self.lower_row_invariant(target_row, 0)
        
        curr_pos = self.current_position(target_row, 0)
        curr_row, curr_col = curr_pos[0], curr_pos[1]
        
        # Check if current tile contains target tile and move 0 to the last col 
        # of row - 1:
        if (curr_row == target_row - 1) and (curr_col == 0):
            dist = ["u"]
            dist.append("r" * (self.get_width() - 1))
            dist = "".join(dist)
            self.update_puzzle(dist)
        
        # Move current tile to target row - 1 and col = 1. Use homework #9 answer
        # to put the target tile to the solved position. Move 0 to end of the grid
        # of row - 1:
        else:
            dist = "ur"
            dist += self.position_tile(target_row - 1, 1, curr_row, curr_col)
            dist += "ruldrdlurdluurddlur"
            dist += "r" * (self.get_width() - 2)
            self.update_puzzle(dist)
            
        assert self.lower_row_invariant(target_row - 1, self.get_width() - 1)
        
        return dist

    #############################################################
    # Phase two methods

    def row0_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row zero invariant
        at the given column (col > 1)
        Returns a boolean
        """
        invar_bool = True
        
        if self.get_number(0, target_col) != 0:
            return False
        
        # Check rows below row 1:
        for row_invar in range(2, self.get_height()):
            for col_invar in range(self.get_width()):
                correct_no = (col_invar + self.get_width() * row_invar)
                if self.get_number(row_invar, col_invar) != correct_no:
                    return False
                
        # Check cols after target_col in row 1:
        for col_invar in range(target_col+1, self.get_width()):
            correct_no = (col_invar + self.get_width() * 1)
            if self.get_number(1, col_invar) != correct_no:
                return False
            
        # Check cols after target_col in row 0:
        for col_invar in range(target_col+1, self.get_width()):
            correct_no = (col_invar + self.get_width() * 0)
            if self.get_number(0, col_invar) != correct_no:
                return False
            
       # Check if (1, j) is solved: 
        if self.get_number(1, target_col) != (target_col + self.get_width() * 1):
            return False
                
        return invar_bool

    def row1_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row one invariant
        at the given column (col > 1)
        Returns a boolean
        """
        invar_bool = True
        
        if self.get_number(1, target_col) != 0:
            return False
        
        # Check rows below target_row:
        for row_invar in range(2, self.get_height()):
            for col_invar in range(self.get_width()):
                correct_no = (col_invar + self.get_width() * row_invar)
                if self.get_number(row_invar, col_invar) != correct_no:
                    return False
        
        # Check cols after target_col:
        for col_invar in range(target_col+1, self.get_width()):
            correct_no = (col_invar + self.get_width() * 1)
            if self.get_number(1, col_invar) != correct_no:
                return False
                
        return invar_bool

    def solve_row0_tile(self, target_col):
        """
        Solve the tile in row zero at the specified column
        Updates puzzle and returns a move string
        """
        assert self.row0_invariant(target_col)
        
        curr_pos = self.current_position(0, target_col)
        curr_row, curr_col = curr_pos[0], curr_pos[1]

        # Check if current tile contains target tile and move 0 to the last col 
        # of row - 1:
        
        if curr_row == 0:
            dist = ["l"] * abs(curr_col - target_col)
            if abs(curr_col - target_col) != 1:
                dist.append("drrul" * (abs(curr_col - target_col) - 2))
                dist.append("druld")
                dist.append("urdlurrdluldrruld")
                dist = "".join(dist)
                self.update_puzzle(dist)
            else:
                dist.append("d")
                dist = "".join(dist)
                self.update_puzzle(dist)
                
        else:
            dist = ["ld"]
            dist.append("l" * (abs(curr_col - target_col) - 1))
            if (abs(curr_col - target_col) - 1) != 1:
                dist.append("urrdl" * (abs(curr_col - target_col) - 2))
            dist.append("urdlurrdluldrruld")
            dist = "".join(dist)
            self.update_puzzle(dist)
        
        assert self.row1_invariant(target_col - 1)
        
        return dist

    def solve_row1_tile(self, target_col):
        """
        Solve the tile in row one at the specified column
        Updates puzzle and returns a move string
        """
        assert self.row1_invariant(target_col)
        
        curr_pos = self.current_position(1, target_col)
        curr_row, curr_col = curr_pos[0], curr_pos[1]
        
        if curr_row == 1:
            dist = ["l"] * abs(curr_col - target_col)
            if abs(curr_col - target_col) != 1:
                dist.append("urrdl" * (abs(curr_col - target_col) - 1))
                dist.append("ur")
            else:
                dist.append("ur")
            dist = "".join(dist)
            self.update_puzzle(dist)
                
        else:
            dist = self.position_tile(1, target_col, curr_row, curr_col)
            dist = dist[:-2]
            self.update_puzzle(dist)
        
        assert self.row0_invariant(target_col)
        
        return dist

    ###########################################################
    # Phase 3 methods
    def verify_configuration(self, move):
        """
        Checks if the upper left 2x2 tiles are in
        their correct configuration
        """
        board = self.clone()
        board.update_puzzle(move)
        return board.current_position(0, 1) == (0, 1) and \
        board.current_position(1, 1) == (1, 1) and \
        board.current_position(1, 0) == (1, 0)


    def solve_2x2(self):
        """
        Solve the upper left 2x2 part of the puzzle
        Updates the puzzle and returns a move string
        """
        # replace with your code
        moves = ""

        if self.verify_configuration("ul"):
            moves += "ul"
            self.update_puzzle(moves)
            return moves
        elif self.verify_configuration("lu"):
            moves += "lu"
            self.update_puzzle(moves)
            return moves

        moves += "ul"

        board = self.clone()
        for item in ["rdlu", "rdlu"]:
            board.update_puzzle(item)
            if board.current_position(0, 1) == (0, 1) and \
            board.current_position(1, 1) == (1, 1) and \
            board.current_position(1, 0) == (1, 0):
                moves += item
                self.update_puzzle(moves)
                return moves
            else:
                moves += item
                board.update_puzzle(moves)

        board = self.clone()
        for item in ["drul", "drul"]:
            board.update_puzzle(item)
            if board.current_position(0, 1) == (0, 1) and \
            board.current_position(1, 1) == (1, 1) and \
            board.current_position(1, 0) == (1, 0):
                moves += item
                self.update_puzzle(moves)
                return moves
            else:
                moves += item
                board.update_puzzle(moves)

        self.update_puzzle(moves)
        return moves
    
    def check_scramble(self):
        """
        Check if the 0 is at an ideal position and check if the 
        board is scrambled or not
        """   
        scramble = True
        for check_row in range(self.get_height() - 1, -1, -1):
            for check_col in range(self.get_width() - 1, -1, -1):
                correct_no = (check_col + self.get_width() * check_row)
                if self.get_number(check_row, check_col) != correct_no:
                    scramble = False                    
                    return scramble
                
        return True
    
    def rearrange_zero(self):
        """
        Check if the 0 is at an ideal position and check if the 
        board is scrambled or not
        """   
        final_move = ""
        
        check_zero = self.current_position(0, 0)
        row_zero, col_zero = check_zero[0], check_zero[1]
        
        if self.lower_row_invariant(row_zero, col_zero) == False: 
            for row in range(self.get_height() - 1, -1, -1):
                for col in range(self.get_width() - 1, -1, -1):
                    correct_no = (col + self.get_width() * row)
                    if self.get_number(row, col) != correct_no:
                        if col_zero - col > 0:
                            final_move += "l" * abs(col_zero - col)
                        elif col_zero - col < 0:
                            final_move += "r" * abs(col_zero - col)
                        final_move += "d" * abs(row_zero - row)
                    
                        return final_move
        
        elif row_zero <= 1:
            for col in range(self.get_width() - 1, 1, -1):
                correct_no_1 = (col + self.get_width() * 1)
                correct_no_2 = (col + self.get_width() * 0)
            
                if (self.get_number(1, col) != correct_no_1) and (self.get_number(1, col) != 0):
                    final_move += "r" * abs(col_zero - col)
                    final_move += "d" * abs(row_zero - 1)
                    return final_move
                    
                if (self.get_number(0, col) != correct_no_2) and (self.get_number(0, col) != 0):
                    if row_zero - 0 != 0:
                        final_move += "u" * abs(col_zero - col)
                    if col_zero - col < 0:
                        final_move += "r" * abs(col_zero - col)
                    return final_move
                
        return ""

    def solve_puzzle(self):
        """
        Generate a solution string for a puzzle
        Updates the puzzle and returns a move string
        """
        final_move = ""
        
        final_move += self.rearrange_zero()
        scramble = self.check_scramble()

        if scramble == True:
            return ""
        
        self.update_puzzle(final_move)
        
        for row in range(self.get_height() - 1, 1, -1):
            for col in range(self.get_width() - 1, -1, -1):
                correct_no = (col + self.get_width() * row)
                if self.get_number(row, col) == correct_no:
                    continue
                else:
                    if col == 0:
                        final_move += self.solve_col0_tile(row)
                    else:
                        final_move += self.solve_interior_tile(row, col)
                    
        for col in range(self.get_width() - 1, 1, -1): 
            correct_no_1 = (col + self.get_width() * 1)
            correct_no_2 = (col + self.get_width() * 0)
            if (self.get_number(1, col) == correct_no_1) and (self.get_number(0, col) == correct_no_2):
                continue
            else:
                final_move += self.solve_row1_tile(col)
                final_move += self.solve_row0_tile(col)
           
        final_move += self.solve_2x2()
        
        return final_move

# Start interactive simulation
#poc_fifteen_gui.FifteenGUI(Puzzle(4, 4))


