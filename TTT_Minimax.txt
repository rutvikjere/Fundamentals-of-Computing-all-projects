"""
Mini-max Tic-Tac-Toe Player
"""

import poc_ttt_gui
import poc_ttt_provided as provided

# Set timeout, as mini-max can take a long time
import codeskulptor
codeskulptor.set_timeout(60)

# SCORING VALUES - DO NOT MODIFY
SCORES = {provided.PLAYERX: 1,
          provided.DRAW: 0,
          provided.PLAYERO: -1}

def mm_move(board, player):
    """
    Make a move on the board.
    
    Returns a tuple with two elements.  The first element is the score
    of the given board and the second element is the desired move as a
    tuple, (row, col).
    """
    if board.check_win() != None:
        return SCORES[board.check_win()], (-1, -1)
    
    else:
        empty_sqrs = board.get_empty_squares()
        next_move = []
        for sqr in empty_sqrs:
            temp_board = board.clone()
            temp_board.move(sqr[0], sqr[1], player)

            if temp_board.check_win() == None:
                next_move_score = mm_move(temp_board, provided.switch_player(player))[0]
                next_move.append((next_move_score, sqr))
                continue
            elif (temp_board.check_win() == provided.switch_player(player)) or (temp_board.check_win() == provided.DRAW):
                next_move.append((SCORES[temp_board.check_win()], sqr))
                continue
            else:
                return SCORES[temp_board.check_win()], tuple(sqr)
   
        if player == provided.PLAYERX:
            optimal_score = float('-inf')
            for score in next_move:
                if score[0] > optimal_score:
                    optimal_score = score[0]
                    optimal_sqr = score[1]
                    
        if player == provided.PLAYERO:
            optimal_score = float('inf')
            for score in next_move:
                if score[0] < optimal_score:
                    optimal_score = score[0]
                    optimal_sqr = score[1]   
        
        return optimal_score, optimal_sqr

def move_wrapper(board, player, trials):
    """
    Wrapper to allow the use of the same infrastructure that was used
    for Monte Carlo Tic-Tac-Toe.
    """
    move = mm_move(board, player)
    assert move[1] != (-1, -1), "returned illegal move (-1, -1)"
    return move[1]

# Test game with the console or the GUI.
# Uncomment whichever you prefer.
# Both should be commented out when you submit for
# testing to save time.

# provided.play_game(move_wrapper, 1, False)        
# poc_ttt_gui.run_gui(3, provided.PLAYERO, move_wrapper, 1, False)
